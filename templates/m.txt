def update(self, instance, validated_data):
    # Pop out the lessons data from validated data
    lessons_data = validated_data.pop('lessons', [])

    # Update module fields
    instance = super().update(instance, validated_data)

    # Create a list of existing lesson IDs
    existing_lessons = instance.lessons.all()  # Get all lessons of the module
    existing_lessons_ids = [lesson.id for lesson in existing_lessons]

    # Process incoming lessons data
    for lesson_data in lessons_data:
        lesson_id = lesson_data.get('id', None)

        # Update existing lesson if it's in the module
        if lesson_id and lesson_id in existing_lessons_ids:
            lesson_instance = Lesson.objects.get(id=lesson_id, module=instance)
            LessonSerializer().update(lesson_instance, lesson_data)

        # If it's a new lesson (no ID), create it
        else:
            Lesson.objects.create(module=instance, **lesson_data)



    return instance